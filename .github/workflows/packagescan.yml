name: 'Package Scan'
on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repo URL to scan'     
        required: true
      packagename:
        description: 'Package name'
        required: true

permissions:
  contents: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: false

jobs:

# trivy scan IaC and secrets
  trivy:
    name: Trivy vuln
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository:  ${{ github.event.inputs.repo }}

      - name: Run Trivy vulnerability
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'json'
          security-checks: 'vuln'
          output: 'trivy-vulns.json'
    
      - name: Archive Trivy results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: trivy-vulns.json
          if-no-files-found: ignore

      - name: Run Trivy vulnerability
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'cyclonedx'
          security-checks: 'vuln'
          output: 'trivy-results.cdx.json'
    
      - name: Archive Trivy results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: trivy-results.cdx.json
          if-no-files-found: ignore

      - name: Run Trivy secret
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'json'
          security-checks: 'secret'
          output: 'trivy-secrets.json'
      
      - name: Archive Trivy results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: trivy-secrets.json
          if-no-files-found: ignore
          
      - name: Run Trivy config
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'json'
          security-checks: 'config'
          output: 'trivy-config.json'
      
      - name: Archive Trivy results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: trivy-config.json
          if-no-files-found: ignore
          
  sbom:
    runs-on: ubuntu-latest
    steps:
    
    # Checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository:  ${{ github.event.inputs.repo }}
    
    # Create SBOM
      - name: Anchore SBOM Action
        uses: anchore/sbom-action@v0.13.1
        with:
          artifact-name: ${{ github.event.inputs.packagename }}
          format: spdx-json
          output-file: "anchore-sbom.spdx.json"
    
    # Scan SBOM
      - name: Anchore Container Scan
        uses: anchore/scan-action@v3.3.2
        id: scan
        with:
          sbom: "anchore-sbom.spdx.json"
          fail-build: "false"
          severity-cutoff: negligible
      
      - name: upload Anchore scan SBOM
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: "anchore-sbom.spdx.json"
      
      - name: upload Anchore scan SARIF report
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ github.event.inputs.packagename }}-results
          path: ${{ steps.scan.outputs.sarif }}
      
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan.outputs.sarif }}
